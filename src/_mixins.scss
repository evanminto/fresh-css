@function switcher-basis($breakpoint) {
  @return calc((#{$breakpoint} - 100%) * 9999);
}

// Quantity selector. Selects children if there are exactly n of them.
@mixin n-exactly($n) {
  &:first-child:nth-last-child(#{$n}),
  &:first-child:nth-last-child(#{$n}) ~ * {
    @content;
  }
}

// Quantity selector. Selects children if there are n or more of them.
@mixin n-or-more($n) {
  &:first-child:nth-last-child(n + #{$n}),
  &:first-child:nth-last-child(n + #{$n}) ~ * {
    @content;
  }
}

// Clears the default bullets and padding from a list element.
@mixin clear-list-style {
  list-style: none;
  padding: 0;
}

@mixin l-box($gutter: $space-md) {
  padding: var(--gutter);
  outline: var(--border-width-md) solid transparent;
}

@mixin l-box--stretch($parent-gutter: $space-md) {
  margin-left: calc(-1 * #{$parent-gutter});
  margin-right: calc(-1 * #{$parent-gutter});
  max-width: calc(100% + 2 * #{$parent-gutter});
  width: calc(100% + 2 * #{$parent-gutter});
}

@mixin l-stack($gap: $space-md) {
  @include clear-list-style;

  display: flex;
  flex-direction: column;
  grid-gap: 0;
  gap: 0;
  margin-bottom: calc(-1 * #{$gap});

  > * {
    margin: 0;
    margin-bottom: $gap;
  }
}

@mixin l-stack--compact {
  margin-bottom: 0;

  > * {
    margin-bottom: 0;
  }
}

@mixin l-stack__split-after {
  margin-bottom: auto;
}

@mixin l-switcher-sidebar-base($gap-inline: $space-md, $gap-block: $space-md) {
  @include clear-list-style;

  display: flex;
  flex-wrap: wrap;
  grid-gap: 0;
  gap: 0;
  margin-left: calc(-1 * #{$gap-inline});
  margin-bottom: calc(-1 * #{$gap-block});

  > * {
    margin: 0;
    margin-left: $gap-inline;
    margin-bottom: $gap-block;
  }
}

@mixin l-switcher($breakpoint: $measure, $gap-inline: $space-md, $gap-block: $space-md, $flex-grow: 1) {
  @include l-switcher-sidebar-base($gap-inline, $gap-block);

  > * {
    flex: $flex-grow 1 switcher-basis($breakpoint);
  }
}

@mixin l-switcher--sizes($sizes: ()) {
  @for $i from 1 through length($sizes) {
    $value: nth($sizes, $i);

    > :nth-child(#{$i}) {
      flex-grow: $value;
    }
  }
}

@mixin l-switcher--breakpoint($count, $breakpoint) {
  > * {
    @include n-exactly($count) {
      flex-basis: switcher-basis($breakpoint);
    }
  }
}

@mixin l-switcher--breakpoints($breakpoints: ()) {
  @for $i from 1 through length($breakpoints) {
    $breakpoint: nth($breakpoints, $i);

    @include l-switcher--breakpoint($i, $breakpoint);
  }
}

@mixin l-sidebar(
  $breakpoint: $measure,
  $min-size: 50%,
  $gap-inline: $space-md,
  $gap-block: $space-md,
  $sidebar-size: auto,
  $main-selector: ':first-child'
) {
  @include l-switcher-sidebar-base($gap-inline, $gap-block);

  > * {
    flex: 1 1 $sidebar-size;
  }

  > #{$main-selector} {
    flex: 9999 1 calc((#{$breakpoint} - 100%) * 9999);
    min-width: calc(#{$min-size} - #{$gap-inline});
  }
}

@mixin l-grid(
  $child-target-size: 10rem,
  $child-target-size-fallback: calc(10% + 6.5rem),
  $gap-inline: none,
  $gap-block: none
) {
  @include clear-list-style;

  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(#{$child-target-size-fallback}, 1fr));

  @if ($gap-inline != none and $gap-block != none) {
    grid-gap: $gap-inline $gap-block;
    gap: $gap-inline $gap-block;
  }

  @supports (width: min(1rem, 2rem)) {
    grid-template-columns: repeat(auto-fill, minmax(min(#{$child-target-size}, 100%), 1fr));
  }

  > * {
    @supports (display: grid) {
      margin: 0;
    }
  }
}

@mixin l-center($max-size: $measure) {
  display: flex;
  flex-direction: column;

  > * {
    width: 100%;
    margin: auto;
    max-width: $max-size;
  }
}

@mixin l-cover($min-size: 100vh, $gutter: $space-md, $gap: $space-md) {
  display: flex;
  flex-direction: column;
  grid-gap: 0;
  gap: 0;
  justify-content: space-between;
  min-height: $min-size;
  padding: $gutter;

  > :first-child:not(.l-cover__main) {
    margin: 0;
    margin-bottom: $gap;
  }

  > :last-child:not(.l-cover__main) {
    margin: 0;
    margin-top: $gap;
  }
}

@mixin l-cover__main {
  margin-block: auto;
}

@mixin l-cover--breakout {
  width: 100vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
  max-width: none;
}

@mixin l-frame($aspect-ratio: 1/1) {
  overflow: hidden;
  padding-bottom: calc(100% / (#{$aspect-ratio}));
  position: relative;

  > * {
    position: absolute;
    inset: 0 0 0 0;
    height: 100%;
    width: 100%;
  }
}

@mixin l-cluster($gap-inline: $space-md, $gap-block: $space-md) {
  @include clear-list-style;

  align-items: center;
  display: flex;
  flex-wrap: wrap;
  grid-gap: 0;
  gap: 0;
  margin-left: calc(-1 * #{$gap-inline});
  margin-bottom: calc(-1 * #{$gap-block});

  > * {
    flex: 0 0 auto;
    margin: 0;
    margin-left: $gap-inline;
    margin-bottom: $gap-block;
  }
}

@mixin l-cluster--spread {
  justify-content: space-between;
}

@mixin l-cluster--end {
  justify-content: flex-end;
}

@mixin l-cluster--center {
  justify-content: center;
}

@mixin l-reel($gap: $space-md, $bg-color: white) {
  @include clear-list-style;

  display: flex;
  grid-gap: 0;
  gap: 0;
  list-style: none;
  max-width: 100%;
  overflow-inline: auto;
  overflow-block: hidden;
  position: relative;

  // Slight gradient to show that it's scrollable.
  @supports (position: sticky) {
    &::before {
      content: "";

      display: block;
      flex: 0 0 $gap;
      width: $gap;

      position: sticky;
      right: 0;
      z-index: 1;

      order: 9999;

      background: linear-gradient(to left, $bg-color, transparent);
    }
  }

  // Trailing gap
  &::after {
    content: "";
    display: block;
    flex: 0 0 $gap;
  }

  > * {
    flex: 0 0 auto;

    + * {
      margin-top: 0;
      margin-left: $gap;
    }
  }
}

@mixin l-float(
  $direction: left,
  $breakpoint: $measure,
  $min-size: calc(25% + #{$measure} / 8),
  $max-size: 100%,
  $gap-inline: $space-md,
  $gap-block: $space-md
) {
  display: block;
  float: $direction;

  min-width: $min-size;
  max-width: $max-size;
  width: calc((#{$breakpoint} - 100%) * 9999);

  @if ($gap-block != none) {
    @if ($direction == left) {
      margin-right: $gap;
    }

    @if ($direction == right) {
      margin-left: $gap;
    }
  }

  @if ($gap-block != none) {
    margin-bottom: $gap;

    // Remove default gap on subsequent element.
    + * {
      margin: 0;
    }
  }
}
